{"ast":null,"code":"var _jsxFileName = \"F:\\\\test\\\\frontend\\\\src\\\\screens\\\\MeetingsScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getMeetings } from './../actions/employeeActions';\nimport Header from './../components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QueriesScreen = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const employeeMeetings = useSelector(store => store.employeeMeetings);\n  const {\n    error,\n    response,\n    loading\n  } = employeeMeetings;\n  const userLogin = useSelector(store => store.userLogin); // // call this only once (when the page has loaded successfully)\n\n  useEffect(() => {\n    dispatch(getMeetings());\n  }, []);\n  useEffect(() => {}, [error, response, loading]);\n\n  const onAddNewMeeting = () => {\n    props.history.push('/addmeetingscreen');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Meetings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), userLogin.response && userLogin.response.data.role == 'admin' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onAddNewMeeting,\n        className: \"btn btn-primary float-start\",\n        children: \"Add New Meeting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"MeetingId\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Meeting Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Meeting Date Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Meeting Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: response && response.data && response.data.length > 0 && response.data.map(meeting => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: meeting.meetingId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: meeting.meetingDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: meeting.meetingInfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: meeting.meetingStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 37\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QueriesScreen, \"i5i4bgYll++Sam/FRQEMliNna/A=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = QueriesScreen;\nexport default QueriesScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"QueriesScreen\");","map":{"version":3,"sources":["F:/test/frontend/src/screens/MeetingsScreen.js"],"names":["useEffect","useDispatch","useSelector","getMeetings","Header","QueriesScreen","props","dispatch","employeeMeetings","store","error","response","loading","userLogin","onAddNewMeeting","history","push","data","role","length","map","meeting","meetingId","meetingDate","meetingInfo","meetingStatus"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,gBAAgB,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACD,gBAAlB,CAApC;AACA,QAAM;AAAEE,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,MAA+BJ,gBAArC;AAEA,QAAMK,SAAS,GAAGX,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACI,SAAlB,CAA7B,CAL6B,CAO7B;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,QAAQ,CAACJ,WAAW,EAAZ,CAAR;AACH,GAFQ,EAEN,EAFM,CAAT;AAIAH,EAAAA,SAAS,CAAC,MAAM,CAAG,CAAV,EAAY,CAACU,KAAD,EAAQC,QAAR,EAAkBC,OAAlB,CAAZ,CAAT;;AAEA,QAAME,eAAe,GAAG,MAAM;AAC1BR,IAAAA,KAAK,CAACS,OAAN,CAAcC,IAAd,CAAmB,mBAAnB;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,YADJ,EAGQH,SAAS,CAACF,QAAV,IAAsBE,SAAS,CAACF,QAAV,CAAmBM,IAAnB,CAAwBC,IAAxB,IAAgC,OAAtD,iBACA;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAEJ,eAAjB;AAAkC,QAAA,SAAS,EAAC,6BAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJR,eAUI;AAAO,MAAA,SAAS,EAAC,qBAAjB;AAAA,8BACI;AAAA,+BACI;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA,kBALJ,eAMI;AAAA;AAAA;AAAA;AAAA,kBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAYQ;AAAA,kBAEQH,QAAQ,IACRA,QAAQ,CAACM,IADT,IAEAN,QAAQ,CAACM,IAAT,CAAcE,MAAd,GAAuB,CAFvB,IAGAR,QAAQ,CAACM,IAAT,CAAcG,GAAd,CAAmBC,OAAD,IAAa;AAC3B,8BACI;AAAA,oCACI;AAAA,wBAAKA,OAAO,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA,wBAAKD,OAAO,CAACE;AAAb;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAA,wBAAKF,OAAO,CAACG;AAAb;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAA,wBAAKH,OAAO,CAACI;AAAb;AAAA;AAAA;AAAA;AAAA,oBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AAQH,SATD;AALR;AAAA;AAAA;AAAA;AAAA,cAZR;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4CH,CA9DD;;GAAMpB,a;UACeJ,W,EACQC,W,EAGPA,W;;;KALhBG,a;AAgEN,eAAeA,aAAf","sourcesContent":["import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getMeetings } from './../actions/employeeActions';\r\nimport Header from './../components/Header';\r\n\r\nconst QueriesScreen = (props) => {\r\n    const dispatch = useDispatch()\r\n    const employeeMeetings = useSelector((store) => store.employeeMeetings)\r\n    const { error, response, loading } = employeeMeetings\r\n\r\n    const userLogin = useSelector((store) => store.userLogin)\r\n\r\n    // // call this only once (when the page has loaded successfully)\r\n    useEffect(() => {\r\n        dispatch(getMeetings())\r\n    }, [])\r\n\r\n    useEffect(() => { }, [error, response, loading])\r\n\r\n    const onAddNewMeeting = () => {\r\n        props.history.push('/addmeetingscreen')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header title=\"Meetings\" />\r\n            {\r\n                userLogin.response && userLogin.response.data.role == 'admin' &&\r\n                <div>\r\n                    <br />\r\n                    <button onClick={onAddNewMeeting} className=\"btn btn-primary float-start\">Add New Meeting</button>\r\n                </div>\r\n            }\r\n\r\n            <table className=\"table table-striped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>MeetingId</th>\r\n                        <th>Meeting Info</th>\r\n                        <th>Meeting Date Time</th>\r\n                        <th>Meeting Status</th>\r\n                        <th></th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                {\r\n                    <tbody>\r\n                        {\r\n                            response &&\r\n                            response.data &&\r\n                            response.data.length > 0 &&\r\n                            response.data.map((meeting) => {\r\n                                return (\r\n                                    <tr>\r\n                                        <td>{meeting.meetingId}</td>\r\n                                        <td>{meeting.meetingDate}</td>\r\n                                        <td>{meeting.meetingInfo}</td>\r\n                                        <td>{meeting.meetingStatus}</td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                }\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QueriesScreen\r\n"]},"metadata":{},"sourceType":"module"}