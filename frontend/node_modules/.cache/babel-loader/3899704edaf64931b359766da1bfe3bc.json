{"ast":null,"code":"import { QUERY_ADD_SUCCESS, QUERY_ADD_REQUEST, QUERY_ADD_FAIL, MEETING_FETCH_REQUEST, MEETING_FETCH_SUCCESS, MEETING_FETCH_FAIL } from './../constants/employeeConstants';\nimport { LEAVE_ADD_SUCCESS } from \"../constants/employeeConstants\";\nimport axios from 'axios';\nimport { LEAVE_ADD_REQUEST, LEAVE_ADD_FAIL } from './../constants/employeeConstants';\nexport const fetchMeetings = () => {\n  return dispatch => {\n    dispatch({\n      type: MEETING_FETCH_REQUEST\n    });\n    const header = {\n      headers: {\n        'Content-Type': 'application/json',\n        token: sessionStorage['token']\n      }\n    };\n    const url = 'http://localhost:4000/meeting/getAll';\n    axios.get(url, header).then(response => {\n      dispatch({\n        type: MEETING_FETCH_SUCCESS,\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: MEETING_FETCH_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const addLeave = (leaveDate, leavePurpose, leaveStatus) => {\n  return dispatch => {\n    dispatch({\n      type: LEAVE_ADD_REQUEST\n    });\n    const header = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = {\n      leaveDate,\n      leavePurpose,\n      leaveStatus\n    };\n    const url = 'http://localhost:4000/employee/leave';\n    axios.post(url, body, header).then(response => {\n      dispatch({\n        type: LEAVE_ADD_SUCCESS,\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: LEAVE_ADD_FAIL,\n        payload: error\n      });\n    });\n  };\n};\nexport const addQuery = (queryTitle, queryDesc, queryStatus, empId) => {\n  return dispatch => {\n    dispatch({\n      type: QUERY_ADD_REQUEST\n    });\n    const header = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = {\n      queryTitle,\n      queryDesc,\n      queryStatus,\n      empId\n    };\n    const url = 'http://localhost:4000/employee/Query';\n    axios.post(url, body, header).then(response => {\n      dispatch({\n        type: QUERY_ADD_SUCCESS,\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: QUERY_ADD_FAIL,\n        payload: error\n      });\n    });\n  };\n};","map":{"version":3,"sources":["F:/test/frontend/src/actions/employeeActions.js"],"names":["QUERY_ADD_SUCCESS","QUERY_ADD_REQUEST","QUERY_ADD_FAIL","MEETING_FETCH_REQUEST","MEETING_FETCH_SUCCESS","MEETING_FETCH_FAIL","LEAVE_ADD_SUCCESS","axios","LEAVE_ADD_REQUEST","LEAVE_ADD_FAIL","fetchMeetings","dispatch","type","header","headers","token","sessionStorage","url","get","then","response","payload","data","catch","error","addLeave","leaveDate","leavePurpose","leaveStatus","body","post","addQuery","queryTitle","queryDesc","queryStatus","empId"],"mappings":"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","sourcesContent":["import { \r\n    QUERY_ADD_SUCCESS, \r\n    QUERY_ADD_REQUEST, \r\n    QUERY_ADD_FAIL, \r\n    \r\n    MEETING_FETCH_REQUEST, MEETING_FETCH_SUCCESS, MEETING_FETCH_FAIL } from './../constants/employeeConstants';\r\nimport { LEAVE_ADD_SUCCESS } from \"../constants/employeeConstants\";\r\nimport axios from 'axios'\r\nimport { LEAVE_ADD_REQUEST, LEAVE_ADD_FAIL } from './../constants/employeeConstants';\r\n\r\nexport const fetchMeetings = () => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: MEETING_FETCH_REQUEST,\r\n        })\r\n\r\n        const header = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                token: sessionStorage['token'],\r\n            },\r\n        }\r\n\r\n        const url = 'http://localhost:4000/meeting/getAll'\r\n\r\n        axios\r\n            .get(url, header)\r\n            .then((response) => {\r\n                dispatch({\r\n                    type: MEETING_FETCH_SUCCESS,\r\n                    payload: response.data,\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({\r\n                    type: MEETING_FETCH_FAIL,\r\n                    payload: error,\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nexport const addLeave = (leaveDate, leavePurpose, leaveStatus) => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: LEAVE_ADD_REQUEST,\r\n        })\r\n\r\n        const header = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }\r\n\r\n        const body = {\r\n            leaveDate,\r\n            leavePurpose,\r\n            leaveStatus\r\n        }\r\n\r\n        const url = 'http://localhost:4000/employee/leave'\r\n\r\n        axios\r\n            .post(url, body, header)\r\n            .then((response) => {\r\n                dispatch({\r\n                    type: LEAVE_ADD_SUCCESS,\r\n                    payload: response.data,\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({\r\n                    type: LEAVE_ADD_FAIL,\r\n                    payload: error,\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const addQuery = (queryTitle, queryDesc, queryStatus, empId) => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: QUERY_ADD_REQUEST,\r\n        })\r\n\r\n        const header = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }\r\n\r\n        const body = {\r\n            queryTitle,\r\n            queryDesc,\r\n            queryStatus,\r\n            empId\r\n        }\r\n\r\n        const url = 'http://localhost:4000/employee/Query'\r\n\r\n        axios\r\n            .post(url, body, header)\r\n            .then((response) => {\r\n                dispatch({\r\n                    type: QUERY_ADD_SUCCESS,\r\n                    payload: response.data,\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                dispatch({\r\n                    type: QUERY_ADD_FAIL,\r\n                    payload: error,\r\n                })\r\n            })\r\n    }\r\n}   "]},"metadata":{},"sourceType":"module"}